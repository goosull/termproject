{"ast":null,"code":"const express = require('express');\nconst router = express.Router();\nconst Canvas = require('../models/Canvas');\n\n// Get all canvas (of user)\nrouter.get('/', async (req, res) => {\n  const login_user = req.query.user;\n  try {\n    const canvas = login_user != null ? await Canvas.find({\n      user: login_user\n    }) : [];\n    res.json(canvas);\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\n\n//Get canvas by id\nrouter.get('/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const canvas = await Canvas.findById(id);\n    if (!canvas) {\n      return res.status(404).json({\n        message: 'conavs not found'\n      });\n    }\n    res.json(canvas);\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\nrouter.get('/thumb/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const canvas = await Canvas.findById(id);\n    if (!canvas) {\n      return res.status(404).json({\n        message: 'conavs not found'\n      });\n    }\n    res.json(canvas.thumb);\n  } catch (err) {\n    res.status(500).json({\n      message: err.message\n    });\n  }\n});\n\n// Save new canvas\nrouter.post('/', async (req, res) => {\n  const canvas = new Canvas(req.body);\n  //console.log(req);\n  try {\n    await canvas.save();\n    res.status(201).json(canvas);\n  } catch (err) {\n    res.status(400).json({\n      message: err.message\n    });\n  }\n});\n\n// Update canvas\nrouter.put('/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const canvas = await Canvas.findByIdAndUpdate(id, req.body, {\n      new: false\n    });\n    if (!canvas) {\n      return res.status(404).json({\n        message: 'Canvas not found'\n      });\n    }\n    res.json(canvas);\n  } catch (err) {\n    res.status(400).json({\n      message: err.message\n    });\n  }\n});\nrouter.put('/share/:id/', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  const name = req.body.name;\n  try {\n    const old_canvas = await Canvas.findById(id);\n    const new_canvas = await Canvas.findByIdAndUpdate(id, {\n      user: [...old_canvas.user, name]\n    }, {\n      new: false\n    });\n    if (!new_canvas) {\n      return res.status(404).json({\n        message: 'Canvas not found'\n      });\n    }\n    res.json(new_canvas);\n  } catch (err) {\n    res.status(400).json({\n      message: err.message\n    });\n  }\n});\n\n// Delete canvas\nrouter.delete('/:id', async (req, res) => {\n  const {\n    id\n  } = req.params;\n  try {\n    const canvas = await Canvas.findByIdAndDelete(id);\n    if (!canvas) {\n      return res.status(404).json({\n        message: 'Canvas not found'\n      });\n    }\n    res.sendStatus(204);\n  } catch (err) {\n    res.status(400).json({\n      message: err.message\n    });\n  }\n});\nmodule.exports = router;","map":{"version":3,"names":["express","require","router","Router","Canvas","get","req","res","login_user","query","user","canvas","find","json","err","status","message","id","params","findById","thumb","post","body","save","put","findByIdAndUpdate","new","name","old_canvas","new_canvas","delete","findByIdAndDelete","sendStatus","module","exports"],"sources":["/Users/ideachoi/Documents/univ/3_1/webos/term_final/termproject/backend/routes/canvasRoutes.js"],"sourcesContent":["const express = require('express');\nconst router = express.Router();\nconst Canvas = require('../models/Canvas');\n\n// Get all canvas (of user)\nrouter.get('/', async (req, res) => {\n    const login_user = req.query.user;\n    try {\n        const canvas = (login_user != null) ? await Canvas.find({user: login_user}) : [];\n        res.json(canvas);\n    } catch (err) {\n        res.status(500).json({ message: err.message });\n    }\n});\n\n//Get canvas by id\nrouter.get('/:id', async (req, res) => {\n    const {id} = req.params;\n    try {\n        const canvas = await Canvas.findById(id);\n        if (!canvas) {\n            return res.status(404).json({message: 'conavs not found'});\n        }\n        res.json(canvas);\n    } catch (err) {\n        res.status(500).json({message: err.message});\n    }\n});\n\nrouter.get('/thumb/:id', async(req, res)=>{\n    const {id} = req.params;\n    try {\n        const canvas = await Canvas.findById(id);\n        if (!canvas) {\n            return res.status(404).json({message: 'conavs not found'});\n        }\n        res.json(canvas.thumb);\n    } catch (err) {\n        res.status(500).json({message: err.message});\n    }\n})\n\n// Save new canvas\nrouter.post('/', async (req, res) => {\n    const canvas = new Canvas(req.body);\n    //console.log(req);\n    try {\n        await canvas.save();\n        res.status(201).json(canvas);\n    } catch (err) {\n        res.status(400).json({ message: err.message});\n    }\n})\n\n// Update canvas\nrouter.put('/:id', async (req, res) => {\n  const { id } = req.params;\n  try {\n    const canvas = await Canvas.findByIdAndUpdate(id, req.body, { new: false });\n    if (!canvas) {\n      return res.status(404).json({ message: 'Canvas not found' });\n    }\n    res.json(canvas);\n  } catch (err) {\n    res.status(400).json({ message: err.message });\n  }\n});\n\nrouter.put('/share/:id/', async (req, res)=>{\n    const {id} = req.params;\n    const name = req.body.name\n    try {\n        const old_canvas = await Canvas.findById(id);\n        const new_canvas = await Canvas.findByIdAndUpdate(id, {user: [...old_canvas.user, name]}, { new: false });\n        if (!new_canvas) {\n        return res.status(404).json({ message: 'Canvas not found' });\n        }\n        res.json(new_canvas);\n    } catch (err) {\n        res.status(400).json({ message: err.message });\n    }\n})\n\n// Delete canvas\nrouter.delete('/:id', async (req, res) => {\n    const { id } = req.params;\n    try {\n        const canvas = await Canvas.findByIdAndDelete(id);\n        if (!canvas) {\n            return res.status(404).json({message: 'Canvas not found'});\n        }\n        res.sendStatus(204);\n    } catch (err) {\n        res.status(400).json({message: err.message});\n    }\n})\n\nmodule.exports = router;"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,MAAM,GAAGF,OAAO,CAACG,MAAM,CAAC,CAAC;AAC/B,MAAMC,MAAM,GAAGH,OAAO,CAAC,kBAAkB,CAAC;;AAE1C;AACAC,MAAM,CAACG,GAAG,CAAC,GAAG,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EAChC,MAAMC,UAAU,GAAGF,GAAG,CAACG,KAAK,CAACC,IAAI;EACjC,IAAI;IACA,MAAMC,MAAM,GAAIH,UAAU,IAAI,IAAI,GAAI,MAAMJ,MAAM,CAACQ,IAAI,CAAC;MAACF,IAAI,EAAEF;IAAU,CAAC,CAAC,GAAG,EAAE;IAChFD,GAAG,CAACM,IAAI,CAACF,MAAM,CAAC;EACpB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACVP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEG,OAAO,EAAEF,GAAG,CAACE;IAAQ,CAAC,CAAC;EAClD;AACJ,CAAC,CAAC;;AAEF;AACAd,MAAM,CAACG,GAAG,CAAC,MAAM,EAAE,OAAOC,GAAG,EAAEC,GAAG,KAAK;EACnC,MAAM;IAACU;EAAE,CAAC,GAAGX,GAAG,CAACY,MAAM;EACvB,IAAI;IACA,MAAMP,MAAM,GAAG,MAAMP,MAAM,CAACe,QAAQ,CAACF,EAAE,CAAC;IACxC,IAAI,CAACN,MAAM,EAAE;MACT,OAAOJ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAACG,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC9D;IACAT,GAAG,CAACM,IAAI,CAACF,MAAM,CAAC;EACpB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACVP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAACG,OAAO,EAAEF,GAAG,CAACE;IAAO,CAAC,CAAC;EAChD;AACJ,CAAC,CAAC;AAEFd,MAAM,CAACG,GAAG,CAAC,YAAY,EAAE,OAAMC,GAAG,EAAEC,GAAG,KAAG;EACtC,MAAM;IAACU;EAAE,CAAC,GAAGX,GAAG,CAACY,MAAM;EACvB,IAAI;IACA,MAAMP,MAAM,GAAG,MAAMP,MAAM,CAACe,QAAQ,CAACF,EAAE,CAAC;IACxC,IAAI,CAACN,MAAM,EAAE;MACT,OAAOJ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAACG,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC9D;IACAT,GAAG,CAACM,IAAI,CAACF,MAAM,CAACS,KAAK,CAAC;EAC1B,CAAC,CAAC,OAAON,GAAG,EAAE;IACVP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAACG,OAAO,EAAEF,GAAG,CAACE;IAAO,CAAC,CAAC;EAChD;AACJ,CAAC,CAAC;;AAEF;AACAd,MAAM,CAACmB,IAAI,CAAC,GAAG,EAAE,OAAOf,GAAG,EAAEC,GAAG,KAAK;EACjC,MAAMI,MAAM,GAAG,IAAIP,MAAM,CAACE,GAAG,CAACgB,IAAI,CAAC;EACnC;EACA,IAAI;IACA,MAAMX,MAAM,CAACY,IAAI,CAAC,CAAC;IACnBhB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAACF,MAAM,CAAC;EAChC,CAAC,CAAC,OAAOG,GAAG,EAAE;IACVP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEG,OAAO,EAAEF,GAAG,CAACE;IAAO,CAAC,CAAC;EACjD;AACJ,CAAC,CAAC;;AAEF;AACAd,MAAM,CAACsB,GAAG,CAAC,MAAM,EAAE,OAAOlB,GAAG,EAAEC,GAAG,KAAK;EACrC,MAAM;IAAEU;EAAG,CAAC,GAAGX,GAAG,CAACY,MAAM;EACzB,IAAI;IACF,MAAMP,MAAM,GAAG,MAAMP,MAAM,CAACqB,iBAAiB,CAACR,EAAE,EAAEX,GAAG,CAACgB,IAAI,EAAE;MAAEI,GAAG,EAAE;IAAM,CAAC,CAAC;IAC3E,IAAI,CAACf,MAAM,EAAE;MACX,OAAOJ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAEG,OAAO,EAAE;MAAmB,CAAC,CAAC;IAC9D;IACAT,GAAG,CAACM,IAAI,CAACF,MAAM,CAAC;EAClB,CAAC,CAAC,OAAOG,GAAG,EAAE;IACZP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEG,OAAO,EAAEF,GAAG,CAACE;IAAQ,CAAC,CAAC;EAChD;AACF,CAAC,CAAC;AAEFd,MAAM,CAACsB,GAAG,CAAC,aAAa,EAAE,OAAOlB,GAAG,EAAEC,GAAG,KAAG;EACxC,MAAM;IAACU;EAAE,CAAC,GAAGX,GAAG,CAACY,MAAM;EACvB,MAAMS,IAAI,GAAGrB,GAAG,CAACgB,IAAI,CAACK,IAAI;EAC1B,IAAI;IACA,MAAMC,UAAU,GAAG,MAAMxB,MAAM,CAACe,QAAQ,CAACF,EAAE,CAAC;IAC5C,MAAMY,UAAU,GAAG,MAAMzB,MAAM,CAACqB,iBAAiB,CAACR,EAAE,EAAE;MAACP,IAAI,EAAE,CAAC,GAAGkB,UAAU,CAAClB,IAAI,EAAEiB,IAAI;IAAC,CAAC,EAAE;MAAED,GAAG,EAAE;IAAM,CAAC,CAAC;IACzG,IAAI,CAACG,UAAU,EAAE;MACjB,OAAOtB,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAAEG,OAAO,EAAE;MAAmB,CAAC,CAAC;IAC5D;IACAT,GAAG,CAACM,IAAI,CAACgB,UAAU,CAAC;EACxB,CAAC,CAAC,OAAOf,GAAG,EAAE;IACVP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAAEG,OAAO,EAAEF,GAAG,CAACE;IAAQ,CAAC,CAAC;EAClD;AACJ,CAAC,CAAC;;AAEF;AACAd,MAAM,CAAC4B,MAAM,CAAC,MAAM,EAAE,OAAOxB,GAAG,EAAEC,GAAG,KAAK;EACtC,MAAM;IAAEU;EAAG,CAAC,GAAGX,GAAG,CAACY,MAAM;EACzB,IAAI;IACA,MAAMP,MAAM,GAAG,MAAMP,MAAM,CAAC2B,iBAAiB,CAACd,EAAE,CAAC;IACjD,IAAI,CAACN,MAAM,EAAE;MACT,OAAOJ,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;QAACG,OAAO,EAAE;MAAkB,CAAC,CAAC;IAC9D;IACAT,GAAG,CAACyB,UAAU,CAAC,GAAG,CAAC;EACvB,CAAC,CAAC,OAAOlB,GAAG,EAAE;IACVP,GAAG,CAACQ,MAAM,CAAC,GAAG,CAAC,CAACF,IAAI,CAAC;MAACG,OAAO,EAAEF,GAAG,CAACE;IAAO,CAAC,CAAC;EAChD;AACJ,CAAC,CAAC;AAEFiB,MAAM,CAACC,OAAO,GAAGhC,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}