{"ast":null,"code":"const express = require('express');\nconst mongoose = require('mongoose');\nconst userRoutes = require('./routes/userRoutes');\nconst canvasRoutes = require('./routes/canvasRoutes');\nconst bodyParser = require('body-parser');\nconst app = express();\nconst port = process.env.PORT || 4000;\nconst mongoURI = process.env.MONGO_URI || 'mongodb://0.0.0.0:27017/mydb';\nmongoose.set('strictQuery', false);\nmongoose.connect(mongoURI, {\n  useNewUrlParser: true,\n  useUnifiedTopology: true\n}).then(() => console.log('MongoDB connected')).catch(err => console.log(err));\nconst cors = require('cors');\napp.use(cors());\napp.use(express.json());\napp.use(bodyParser.json({\n  limit: '10mb'\n}));\napp.use(bodyParser.urlencoded({\n  extended: true,\n  limit: '10mb'\n}));\napp.use('/api/users', userRoutes);\napp.use('/api/canvas', canvasRoutes);\napp.listen(port, () => console.log(`Server listening on port ${port}`));","map":{"version":3,"names":["express","require","mongoose","userRoutes","canvasRoutes","bodyParser","app","port","process","env","PORT","mongoURI","MONGO_URI","set","connect","useNewUrlParser","useUnifiedTopology","then","console","log","catch","err","cors","use","json","limit","urlencoded","extended","listen"],"sources":["/Users/ideachoi/Documents/univ/3_1/webos/term_final/termproject/backend/server.js"],"sourcesContent":["const express = require('express');\nconst mongoose = require('mongoose');\nconst userRoutes = require('./routes/userRoutes');\nconst canvasRoutes = require('./routes/canvasRoutes');\nconst bodyParser = require('body-parser');\n\nconst app = express();\nconst port = process.env.PORT || 4000;\nconst mongoURI = process.env.MONGO_URI || 'mongodb://0.0.0.0:27017/mydb';\n\nmongoose.set('strictQuery', false);\nmongoose.connect(mongoURI, { useNewUrlParser: true, useUnifiedTopology: true })\n  .then(() => console.log('MongoDB connected'))\n  .catch(err => console.log(err));\n\nconst cors = require('cors');\napp.use(cors())\napp.use(express.json());\n\napp.use(bodyParser.json({ limit: '10mb' }));\napp.use(bodyParser.urlencoded({ extended: true, limit: '10mb' }));\n\napp.use('/api/users', userRoutes);\n\napp.use('/api/canvas', canvasRoutes);\n\napp.listen(port, () => console.log(`Server listening on port ${port}`));\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAS,CAAC;AAClC,MAAMC,QAAQ,GAAGD,OAAO,CAAC,UAAU,CAAC;AACpC,MAAME,UAAU,GAAGF,OAAO,CAAC,qBAAqB,CAAC;AACjD,MAAMG,YAAY,GAAGH,OAAO,CAAC,uBAAuB,CAAC;AACrD,MAAMI,UAAU,GAAGJ,OAAO,CAAC,aAAa,CAAC;AAEzC,MAAMK,GAAG,GAAGN,OAAO,CAAC,CAAC;AACrB,MAAMO,IAAI,GAAGC,OAAO,CAACC,GAAG,CAACC,IAAI,IAAI,IAAI;AACrC,MAAMC,QAAQ,GAAGH,OAAO,CAACC,GAAG,CAACG,SAAS,IAAI,8BAA8B;AAExEV,QAAQ,CAACW,GAAG,CAAC,aAAa,EAAE,KAAK,CAAC;AAClCX,QAAQ,CAACY,OAAO,CAACH,QAAQ,EAAE;EAAEI,eAAe,EAAE,IAAI;EAAEC,kBAAkB,EAAE;AAAK,CAAC,CAAC,CAC5EC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAAC,CAC5CC,KAAK,CAACC,GAAG,IAAIH,OAAO,CAACC,GAAG,CAACE,GAAG,CAAC,CAAC;AAEjC,MAAMC,IAAI,GAAGrB,OAAO,CAAC,MAAM,CAAC;AAC5BK,GAAG,CAACiB,GAAG,CAACD,IAAI,CAAC,CAAC,CAAC;AACfhB,GAAG,CAACiB,GAAG,CAACvB,OAAO,CAACwB,IAAI,CAAC,CAAC,CAAC;AAEvBlB,GAAG,CAACiB,GAAG,CAAClB,UAAU,CAACmB,IAAI,CAAC;EAAEC,KAAK,EAAE;AAAO,CAAC,CAAC,CAAC;AAC3CnB,GAAG,CAACiB,GAAG,CAAClB,UAAU,CAACqB,UAAU,CAAC;EAAEC,QAAQ,EAAE,IAAI;EAAEF,KAAK,EAAE;AAAO,CAAC,CAAC,CAAC;AAEjEnB,GAAG,CAACiB,GAAG,CAAC,YAAY,EAAEpB,UAAU,CAAC;AAEjCG,GAAG,CAACiB,GAAG,CAAC,aAAa,EAAEnB,YAAY,CAAC;AAEpCE,GAAG,CAACsB,MAAM,CAACrB,IAAI,EAAE,MAAMW,OAAO,CAACC,GAAG,CAAE,4BAA2BZ,IAAK,EAAC,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}